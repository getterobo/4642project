# Copyright (C) 2011 Nippon Telegraph and Telephone Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.lib.packet import ipv4
import threading
from ryu.lib import hub


class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.IP_to_port = {}
        self.ord_list = {}
        self.high_list = {}
        self.data_usage = {}
        self.data_usage_per = {}
        self.ban_list = []
        self.dp = []
        self.monitor_thread = hub.spawn(self._monitor)

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # install table-miss flow entry
        #
        # We specify NO BUFFER to max_len of the output action due to
        # OVS bug. At this moment, if we specify a lesser number, e.g.,
        # 128, OVS will send Packet-In with invalid buffer_id and
        # truncated packet data. In that case, we cannot output packets
        # correctly.  The bug has been fixed in OVS v2.1.0.
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)
        # match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst='10.0.0.254')
        # actions = [parser.OFPActionOutput(1)]
        # self.add_flow(datapath, 1, match, actions)
        # match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst='10.0.0.254')
        # actions = [parser.OFPActionOutput(1)]
        # self.add_flow(datapath, 2, match, actions)
        self.dp.append(datapath)
        self.ban_users(datapath)

    def add_flow(self, datapath, priority, match, actions, buffer_id=None, idle_timeout=0, hard_timeout=0):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]
        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    idle_timeout=idle_timeout, hard_timeout=hard_timeout,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    idle_timeout=idle_timeout, hard_timeout=hard_timeout,
                                    match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        # If you hit this you might want to increase
        # the "miss_send_length" of your switch
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("packet truncated: only %s of %s bytes",
                              ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            # ignore lldp packet
            return
        dst = eth.dst
        src = eth.src
        src_last_2 = src[-2:-1]
        if src_last_2 == "ff": return

        dpid = format(datapath.id, "d").zfill(16)

        self.mac_to_port.setdefault(dpid, {})
        self.IP_to_port.setdefault(dpid, {'10.0.0.253': 1})
        self.ord_list.setdefault(dpid, [])
        self.high_list.setdefault(dpid, [])
        self.data_usage.setdefault(dpid, {})
        self.data_usage_per.setdefault(dpid, {})

        IP4 = pkt.get_protocol(ipv4.ipv4)
        if IP4:
            parts = IP4.src.split('.')
            last = parts[3]
            if last == 254 or last == 253:
                return
            if IP4.src not in self.IP_to_port[dpid]:
                self.IP_to_port[dpid][IP4.src] = in_port
            if IP4.src not in self.ord_list[dpid]:
                self.ord_list[dpid].append(IP4.src)
            if IP4.src not in self.data_usage[dpid]:
                self.data_usage[dpid][IP4.src] = {'rx_bytes': 0}
                self.data_usage[dpid][IP4.src]['rx_bytes'] += len(msg.data)
                self.data_usage_per[dpid][IP4.src] = {'rx_bytes': 0}
            ip_dst = IP4.dst
            ip_src = IP4.src
            match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=ip_src)
            actions = [parser.OFPActionOutput(in_port)]
            self.add_flow(datapath, 1, match, actions)
        if self.ord_list[dpid]:
            for x in range(len(self.ord_list[dpid])):
                ip_src = self.ord_list[dpid][x]
                IP_dst = '10.0.0.253'
                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=IP_dst,
                                        ipv4_src=ip_src)
                actions = [parser.OFPActionOutput(1)]
                self.add_flow(datapath, 1, match, actions)
        # print(self.data_usage)

        # self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

        # learn a mac address to avoid FLOOD next time.
        self.mac_to_port[dpid][src] = in_port
        # self.logger.info(self.IP_to_port)

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        # install a flow to avoid packet_in next time
        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)
            # verify if we have a valid buffer_id, if yes avoid to send both
            # flow_mod & packet_out
            if msg.buffer_id != ofproto.OFP_NO_BUFFER:
                # self.add_flow(datapath, 1, match, actions, msg.buffer_id)
                return
            else:
                # self.add_flow(datapath, 1, match, actions)
                return
        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=data)
        datapath.send_msg(out)

    def _monitor(self):
        while True:
            if self.dp:
                for dp in self.dp:
                    self.ban_users(dp)
            hub.sleep(30)

    def ban_users(self, dp):
        datapath = dp
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        dpid = format(datapath.id, "d").zfill(16)
        lim = 50
        TO = 30
        self.logger.info("=======================")
        self.logger.info("assessing usage")
        if self.ord_list:
            if self.ord_list[dpid]:
                # print(self.ord_list)
                for x in range(len(self.ord_list[dpid])):
                    id = self.ord_list[dpid][x]
                    print("------")
                    print(id)
                    if (id in self.data_usage_per[dpid]) and (id in self.data_usage[dpid]):
                        data_used_before = self.data_usage_per[dpid][id]['rx_bytes']
                        data_used_now = self.data_usage[dpid][id]['rx_bytes']
                        # print(f"prev used: {data_used_before}")
                        # print(f"used now: {data_used_now}")
                        print(f"used: {data_used_now - data_used_before}")
                        if id == '10.0.0.254' or id == '10.0.0.253':
                            return
                        if id not in self.high_list[dpid]:
                            usage = data_used_now - data_used_before
                            if usage >= lim:
                                print("exceed")
                                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_src=id)
                                actions = []
                                self.add_flow(datapath, 10, match, actions, idle_timeout=TO, hard_timeout=TO)
                                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=id)
                                actions = []
                                self.add_flow(datapath, 10, match, actions, idle_timeout=TO, hard_timeout=TO)
                                self.logger.info("User: %s, is banned for %s seconds", id, TO)
                                self.ban_list.append(id)
                            else:
                                if id in self.ban_list:
                                    self.ban_list.remove(id)
                                pass
                        self.data_usage_per[dpid][id]['rx_bytes'] = data_used_now
        print(self.ban_list)
        self.logger.info("=======================")